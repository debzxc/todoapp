app.post("/Register", async (req, res) => {
  const { email, firstname, lastname, password } = req.body;

  try {
    const existingUser = await UserModel.findOne({ email });

    if (existingUser) {
      res.json({ message: "Email already exists" });
    } else {
      const hash = await bcrypt.hash(password, 10);
      const user = await UserModel.create({
        email,
        firstname,
        lastname,
        password: hash,
      });

      const token = new Token({
        userId: user._id,
        token: crypto.randomBytes(32).toString("hex"),
      });

      await token.save();

      const url = `${process.env.BASE_URL}users/${user._id}/verify/${token.token}`;

      await sendEmail(user.email, "Verify your Email", url);

      res
        .status(200)
        .send({ message: "An email has been sent please verify your account" });
    }
  } catch (err) {
    res.json(err);
  }
});

app.get("/:id/verify/:token", async (req, res) => {
  try {
    const user = await UserModel.findByOne({
      _id: req.params.id,
    });
    if (!user)
      return res.status(400).send({
        message: "Invalid link",
      });
    const token = await Token.findOne({
      userId: user._id,
      token: req.params.token,
    });
    if (!token) return res.status(400).send({ message: "Invalid link" });
    await UserModel.updateOne({ _id: user._id, verified: true });
    await token.remove();

    res.status(200).send({ message: "Email verified successfully" });
  } catch (err) {}
});

// app.post('/Register', async (req, res) => {
//     const { email, firstname, lastname, password } = req.body;

//     UserModel.findOne({ email })
//         .then(existingUser => {
//             if (existingUser) {

//                 res.json({ message: 'Email already exists' });
//             } else {

//                 bcrypt.hash(password, 10)
//                     .then(hash => {
//                         UserModel.create({ email, firstname, lastname, password: hash })
//                             .then((user) => {
//                                 const token = new Token({
//                                     userId: user._id,
//                                     token: crypto.randomBytes(32).toString("hex")
//                                 }).save()
//                                 const url = `${process.env.BASE_URL}users/${user_id}/verify/${token.token}`;
//                                 await sendEmail(user.email, "Verify Email", url);
//                             })
//                             .catch(err => res.json(err))
//                     }).catch(err => res.json(err))
//             }
//         })
//         .catch(err => res.json(err))
// })
